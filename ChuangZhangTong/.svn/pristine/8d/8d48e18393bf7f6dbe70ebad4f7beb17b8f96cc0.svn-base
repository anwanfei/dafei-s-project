package com.junhangxintong.chuanzhangtong.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.junhangxintong.chuanzhangtong.shipposition.bean.ShipDetailsBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHIP_DETAILS_BEAN".
*/
public class ShipDetailsBeanDao extends AbstractDao<ShipDetailsBean, Long> {

    public static final String TABLENAME = "SHIP_DETAILS_BEAN";

    /**
     * Properties of entity ShipDetailsBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ShipId = new Property(0, Long.class, "shipId", true, "_id");
        public final static Property ShipName = new Property(1, String.class, "shipName", false, "SHIP_NAME");
        public final static Property ShipNationality = new Property(2, String.class, "shipNationality", false, "SHIP_NATIONALITY");
        public final static Property Mmsi = new Property(3, String.class, "mmsi", false, "MMSI");
        public final static Property ShipType = new Property(4, String.class, "shipType", false, "SHIP_TYPE");
    }


    public ShipDetailsBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ShipDetailsBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHIP_DETAILS_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: shipId
                "\"SHIP_NAME\" TEXT," + // 1: shipName
                "\"SHIP_NATIONALITY\" TEXT," + // 2: shipNationality
                "\"MMSI\" TEXT," + // 3: mmsi
                "\"SHIP_TYPE\" TEXT);"); // 4: shipType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHIP_DETAILS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ShipDetailsBean entity) {
        stmt.clearBindings();
 
        Long shipId = entity.getShipId();
        if (shipId != null) {
            stmt.bindLong(1, shipId);
        }
 
        String shipName = entity.getShipName();
        if (shipName != null) {
            stmt.bindString(2, shipName);
        }
 
        String shipNationality = entity.getShipNationality();
        if (shipNationality != null) {
            stmt.bindString(3, shipNationality);
        }
 
        String mmsi = entity.getMmsi();
        if (mmsi != null) {
            stmt.bindString(4, mmsi);
        }
 
        String shipType = entity.getShipType();
        if (shipType != null) {
            stmt.bindString(5, shipType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ShipDetailsBean entity) {
        stmt.clearBindings();
 
        Long shipId = entity.getShipId();
        if (shipId != null) {
            stmt.bindLong(1, shipId);
        }
 
        String shipName = entity.getShipName();
        if (shipName != null) {
            stmt.bindString(2, shipName);
        }
 
        String shipNationality = entity.getShipNationality();
        if (shipNationality != null) {
            stmt.bindString(3, shipNationality);
        }
 
        String mmsi = entity.getMmsi();
        if (mmsi != null) {
            stmt.bindString(4, mmsi);
        }
 
        String shipType = entity.getShipType();
        if (shipType != null) {
            stmt.bindString(5, shipType);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ShipDetailsBean readEntity(Cursor cursor, int offset) {
        ShipDetailsBean entity = new ShipDetailsBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // shipId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // shipName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // shipNationality
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mmsi
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // shipType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ShipDetailsBean entity, int offset) {
        entity.setShipId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setShipName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setShipNationality(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMmsi(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setShipType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ShipDetailsBean entity, long rowId) {
        entity.setShipId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ShipDetailsBean entity) {
        if(entity != null) {
            return entity.getShipId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ShipDetailsBean entity) {
        return entity.getShipId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
